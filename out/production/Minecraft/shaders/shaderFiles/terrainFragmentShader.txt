#version 400 core

in vec2 passTexCoords;
in vec3 surfaceNormal;
in vec3 lightDirect;
in vec4 shadowCoords;

out vec4 outColor;

uniform sampler2D modelTexture;

uniform vec3 lightColor;
uniform sampler2D shadowMap;

void main(){

    float objectNearestLight = texture(shadowMap, shadowCoords.xy).r;
    float lightFactor = 1.0;

    if(shadowCoords.z > objectNearestLight){
        lightFactor = 1.0 - 0.4;
    }

    vec4 ambient = vec4(0.5, 0.5, 0.5, 1.0) * texture(modelTexture, passTexCoords);

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightDirection = normalize(-lightDirect);

    float nDot1 = dot(unitNormal, unitLightDirection);
    float brightness = max(nDot1, 0.0);

    vec4 color = vec4(lightColor, 1.0f);

    vec4 diffuse = brightness * color * texture(modelTexture, passTexCoords) * lightFactor;


    outColor = diffuse + ambient;
}